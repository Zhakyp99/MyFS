import exception.CommandArgsException;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.Scanner;
import java.util.List;
public class Main {
    private static String HELPER_MSG = "MyFS 1.0 команды:\n" +
            "ls <path>               выводит список всех файлов и директорий для `path`\n" +
            "ls_py <path>            выводит список файлов с расширением `.py` в `path`\n" +
            "is_dir <path>           выводит `true`, если `path` это директория, в других случаях `false`\n" +
            "define <path>           выводит `директория` или `файл` в зависимости от типа `path`\n" +
            "readmod <path>          выводит права для файла в формате `rwx` для текущего пользователя\n" +
            "setmod <path> <perm>    устанавливает права для файла `path`\n" +
            "cat <path>              выводит контент файла\n" +
            "append <path>           добавляет строку `# Autogenerated line` в конец `path`\n" +
            "bc <path>               создает копию `path` в директорию `/tmp/${date}.backup` где, date - это дата в формате `dd-mm-yyyy`\n" +
            "greplong <path>         выводит самое длинное слово в файле\n" +
            "help                    выводит список команд и их описание\n" +
            "exit                    завершает работу программы";
    private static String GOODBYE_MSG = "Good bye";
    private static String FOOTER_STRING = "autogenerate line";
    public static void listDirectory(String path){
        File[] files = getListOfFiles(path);
        if(files == null) return;
        for(File currentFile:files){
            System.out.print(currentFile.getName() + " ");
        }
        System.out.println();
    }
    public static void help(){
        System.out.println(HELPER_MSG);
    }
    public static void exit(){
        System.out.println(GOODBYE_MSG);
    }
    private static String getExtension(String fileName){
        if(fileName.indexOf(".") == 1) return " ";
        return fileName.substring(fileName.indexOf("."));
    }
    public static void listPythonFiles(String path){
        File[] files = getListOfFiles(path);
        if(files == null) return;
        for(File currentFile:files){
            if(getExtension(currentFile.getName()).equals(".py")){
                System.out.print(currentFile.getName() + " ");
            }
        }
        System.out.println();
    }
    private static List<String> getArgs(String command){
        String[] args = command.split(" ");
        return Arrays.stream(args).toList();
    }
    private static File[] getListOfFiles(String path){
        File file = new File(path);
        File[] files = file.listFiles();
        return file.listFiles();
    }

    public static void isDirectory(String path){
        File file = new File(path);
        System.out.println(file.isDirectory());

    }
    public static void define(String path){
        File file = new File(path);
        if(file.isDirectory()){
            System.out.println("directory");
        return;
        }
        System.out.println("file");

    }
    public static void printPermissions(String path){
        File file = new File(path);
        String permissions = "";
        if(file.canRead()){
            permissions+="r";
        }else{
            permissions+="-";
        }
        if(file.canWrite()){
            permissions+="w";
        }else {permissions+="-";}
        if(file.canExecute()){
            permissions+="x";
        }else {permissions+="-";}
        System.out.println(permissions);
    }

    public static void setPermissions(String path, String permissions){
        File file = new File(path);
        boolean isReadable = (permissions.charAt(0) == 'r');
        boolean isWritable = (permissions.charAt(1) == 'w');
        boolean isExecutable = (permissions.charAt(2) == 'x');
        file.setReadable(isReadable);
        file.setWritable(isWritable);
        file.setExecutable(isExecutable);

    }
    public static void printContent(String path) throws Exception{
        File file = new File(path);
        Scanner scanner = new Scanner(file);
        while (scanner.hasNextLine()){
            System.out.println(scanner.nextLine());
        }
        scanner.close();
    }

    public static void appendFooter(String path) throws Exception{
        FileWriter fw = new FileWriter(path,true);
        BufferedWriter bw = new BufferedWriter(fw);
        bw.write(FOOTER_STRING);
        bw.newLine();
        bw.close();
    }
    public static void printLongestWord(String path) throws Exception{
        File file = new File(path);
        Scanner scanner = new Scanner(file);
        String longestWord = "";
        while (scanner.hasNextLine()){
            String currentLine = scanner.nextLine();
            String[] words = currentLine.split(" ");
            for(String word:words){
                if(longestWord.length() < word.length()){
                    longestWord = word;
                }
            }
        }
        scanner.close();
        System.out.println(longestWord);
    }

    public static void createBackup(String path) throws Exception{
        File file = new File(path);
        String currentDate = new SimpleDateFormat("dd-MM-yyyy").format(new Date());
        Path filePath = Paths.get(path);
        Path bcpath = Paths.get(path + "/tmp" + currentDate + ".backup");
        File bcFile = new File("/tmp" +currentDate + ".backup" );
        Files.copy(filePath,bcpath);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        help();
        boolean isExit = false;
        while(!isExit){
            try {
                System.out.print("> ");
                String command = scanner.nextLine();
                List<String> commandArgs = getArgs(command);
                if(commandArgs.size() < 1 || (commandArgs.size() == 1 &&
                        !commandArgs.get(0).equals("help") &&
                        !commandArgs.get(0).equals("exit")))
                    throw new CommandArgsException("not enough command arguments");
                switch (commandArgs.get(0)){
                    case "bc" -> createBackup(commandArgs.get(1));
                    case "greplong" -> printLongestWord(commandArgs.get(1));
                    case "append" -> appendFooter(commandArgs.get(1));
                    case "cat" -> printContent(commandArgs.get(1));
                    case "setmod" -> setPermissions(commandArgs.get(1),commandArgs.get(2));
                    case "readmod" -> printPermissions(commandArgs.get(1));
                    case "define" -> define(commandArgs.get(1));
                    case "is_dir" -> isDirectory(commandArgs.get(1));
                    case "ls_py" -> listPythonFiles(commandArgs.get(1));
                    case "ls" -> listDirectory(commandArgs.get(1));
                    case "exit" -> {
                        exit();
                        isExit = true;
                    }
                    case "help" -> help();
                    default -> {
                        System.out.println("command not recognized");
                    }
                }
                System.out.println(commandArgs.get(0));
            } catch (Exception e){
                System.out.println(e.getMessage());
            }
        }
    }
}